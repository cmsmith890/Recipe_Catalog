using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Forms;
using System.ComponentModel.DataAnnotations;

// Recipe.cs (Model)
namespace RecipeApp.Models
{
    public class Recipe
    {
        public int Id { get; set; }

        [Required]
        public string Title { get; set; }

        [Required]
        public string Description { get; set; }

        [Required]
        public string Ingredients { get; set; }

        [Required]
        public string Instructions { get; set; }

        [Required]
        public string Category { get; set; }
        public DateTime DateAdded { get; set; } = DateTime.Now; // Default to current time
    }
}

// RecipeService.cs (Service)
namespace RecipeApp.Services
{
    using RecipeApp.Models;

    public class RecipeService
    {
        private List<Recipe> recipes = new List<Recipe>();
        private int nextId = 1;
        public RecipeService()
        {
            // Sample data for initial display.
            AddRecipe(new Recipe { Title = "Pancakes", Description = "Fluffy breakfast pancakes.", Ingredients = "Flour, milk, eggs, sugar.", Instructions = "Mix ingredients, cook on griddle.", Category = "Breakfast" });
            AddRecipe(new Recipe { Title = "Spaghetti Bolognese", Description = "Classic Italian pasta dish.", Ingredients = "Pasta, ground beef, tomatoes, onions.", Instructions = "Cook pasta, prepare sauce, combine.", Category = "Dinner" });
            AddRecipe(new Recipe { Title = "Chocolate Cake", Description = "Delicious chocolate dessert.", Ingredients = "Flour, cocoa powder, sugar, eggs.", Instructions = "Bake ingredients, frost the cake.", Category = "Dessert" });
        }

        public List<Recipe> GetRecipes()
        {
            return recipes;
        }

        public Recipe GetRecipe(int id)
        {
            return recipes.FirstOrDefault(r => r.Id == id);
        }

        public void AddRecipe(Recipe recipe)
        {
            recipe.Id = nextId++;
            recipes.Add(recipe);
        }

        public void UpdateRecipe(Recipe recipe)
        {
            var existingRecipe = recipes.FirstOrDefault(r => r.Id == recipe.Id);
            if (existingRecipe != null)
            {
                existingRecipe.Title = recipe.Title;
                existingRecipe.Description = recipe.Description;
                existingRecipe.Ingredients = recipe.Ingredients;
                existingRecipe.Instructions = recipe.Instructions;
                existingRecipe.Category = recipe.Category;
            }
        }

        public void DeleteRecipe(int id)
        {
            var recipeToRemove = recipes.FirstOrDefault(r => r.Id == id);
            if (recipeToRemove != null)
            {
                recipes.Remove(recipeToRemove);
            }
        }

        public List<string> GetCategories()
        {
            return recipes.Select(r => r.Category).Distinct().ToList();
        }
    }
}

// Recipes.razor (Component)
@page "/recipes"
@using RecipeApp.Services
@using RecipeApp.Models
@inject RecipeService RecipeService
@inject NavigationManager NavigationManager

<h1>Recipe Catalog</h1>

<button class="btn btn-primary" @onclick="NavigateToAddRecipe">Add Recipe</button>

@if (recipes == null)
{
    <p>Loading recipes...</p>
}
else if (!recipes.Any())
{
    <p>No recipes found.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Description</th>
                <th>Category</th>
                <th>Date Added</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var recipe in recipes)
            {
                <tr>
                    <td>@recipe.Title</td>
                    <td>@recipe.Description</td>
                    <td>@recipe.Category</td>
                    <td>@recipe.DateAdded.ToShortDateString()</td>
                    <td>
                        <button class="btn btn-warning" @onclick="() => NavigateToEditRecipe(recipe.Id)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteRecipe(recipe.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Recipe> recipes = new();

    protected override void OnInitialized() => recipes = RecipeService.GetRecipes();

    private void NavigateToAddRecipe() => NavigationManager.NavigateTo("/recipes/add");

    private void NavigateToEditRecipe(int id) => NavigationManager.NavigateTo($"/recipes/edit/{id}");

    private async Task DeleteRecipe(int id)
    {
        RecipeService.DeleteRecipe(id);
        recipes = RecipeService.GetRecipes(); // Ensure re-fetching
        StateHasChanged(); // Notify Blazor to re-render the component
    }
}

// AddRecipe.razor (Component)
@page "/recipes/add"
@using RecipeApp.Services
@using RecipeApp.Models
@inject RecipeService RecipeService
@inject NavigationManager NavigationManager

<h1>Add Recipe</h1>

<EditForm Model="@recipe" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Title:</label>
        <InputText @bind-Value="recipe.Title" class="form-control" />
    </div>

    <div class="form-group">
        <label>Description:</label>
        <InputText @bind-Value="recipe.Description" class="form-control" />
    </div>

    <div class="form-group">
        <label>Ingredients:</label>
        <InputTextArea @bind-Value="recipe.Ingredients" class="form-control" />
    </div>

    <div class="form-group">
        <label>Instructions:</label>
        <InputTextArea @bind-Value="recipe.Instructions" class="form-control" />
    </div>

    <div class="form-group">
        <label>Category:</label>
        <InputText @bind-Value="recipe.Category" class="form-control" />
    </div>

    <button type="submit" class="btn btn-primary">Save</button>
    <button @onclick="NavigateToRecipes" class="btn btn-secondary">Cancel</button>
</EditForm>

@code {
    private Recipe recipe = new();

    private void HandleValidSubmit()
    {
        RecipeService.AddRecipe(recipe);
        NavigationManager.NavigateTo("/recipes");
    }

    private void NavigateToRecipes() => NavigationManager.NavigateTo("/recipes");
}

// EditRecipe.razor (Component)
@page "/recipes/edit/{id:int}"
@using RecipeApp.Services
@using RecipeApp.Models
@inject RecipeService RecipeService
@inject NavigationManager NavigationManager

<h1>Edit Recipe</h1>

@if (recipe != null)
{
    <EditForm Model="@recipe" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label>Title:</label>
            <InputText @bind-Value="recipe.Title" class="form-control" />
        </div>

        <div class="form-group">
            <label>Description:</label>
            <InputText @bind-Value="recipe.Description" class="form-control" />
        </div>

        <div class="form-group">
            <label>Ingredients:</label>
            <InputTextArea @bind-Value="recipe.Ingredients" class="form-control" />
        </div>

        <div class="form-group">
            <label>Instructions:</label>
            <InputTextArea @bind-Value="recipe.Instructions" class="form-control" />
        </div>

        <div class="form-group">
            <label>Category:</label>
            <InputText @bind-Value="recipe.Category" class="form-control" />
        </div>

        <button type="submit" class="btn btn-primary">Save</button>
        <button @onclick="NavigateToRecipes" class="btn btn-secondary">Cancel</button>
    </EditForm>
}
else
{
    <p>Loading recipe...</p>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private Recipe recipe;

    protected override void OnInitialized() => recipe = RecipeService.GetRecipe(Id);

    private void HandleValidSubmit()
    {
        RecipeService.UpdateRecipe(recipe);
        NavigationManager.NavigateTo("/recipes");
    }

    private void NavigateToRecipes() => NavigationManager.NavigateTo("/recipes");
}
